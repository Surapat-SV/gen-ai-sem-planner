from crewai import Agent
from langchain_community.llms import OpenAI
from tools.search_tools import SearchTools
from tools.browser_tools import BrowserTools
from tools.calculator_tools import CalculatorTools
import re
import streamlit as st

class SEMAgents():

    def business_analyst_agent():
        return Agent(
            role="Business Analyst",
            goal="Ask strategic questions to help define the target audience and gather detailed business requirements.",
            backstory=(
                "You are a skilled Business Analyst with expertise in identifying target audiences and clarifying business goals. "
                "Your primary responsibility is to gather requirements by asking targeted questions about the product or service. "
                "You collaborate with stakeholders to ensure their needs are fully understood and documented. "
                "Your insights serve as the foundation for planning marketing strategies and campaigns."
            ),
            allow_delegation=False,
            verbose=True
        )

    def web_analyst_agent(self):
        #"""
        #Extracts and compares website data to provide SEM optimization insights.
        #"""
        return Agent(
            role='Website Data Analyst',
            goal=(
                "Scrape websites to extract metadata and keywords, compute similarities, and analyze gaps. "
                "Provide insights and actionable recommendations to improve SEM strategies compared to competitors."
            ),
            backstory=(
                "A data-driven website analyst with years of experience in auditing and optimizing website performance "
                "for SEM strategies. Skilled in metadata analysis, keyword extraction, and competitive benchmarking."
            ),
            tools=[
                SearchTools.search_internet,
                BrowserTools.scrape_and_summarize_website,
            ],
            verbose=True,
        )

    def keyword_planner_agent(self):
        #"""
        #Plans and recommends keywords using database queries and trends analysis.
        #"""
        return Agent(
            role='Keyword Planner',
            goal=(
                "Query databases such as BigQuery to analyze keyword performance, trends, and relevance. "
                "Generate keyword recommendations and SEM strategies based on the data insights."
            ),
            backstory=(
                "A highly skilled keyword planner with over 15 years of experience in database queries and SEM tools. "
                "Expert at developing targeted keyword plans to maximize reach and performance."
            ),
            tools=[
                SearchTools.search_internet,
                BrowserTools.scrape_and_summarize_website,
                # Placeholder for BigQuery tool integration
            ],
            verbose=True,
        )

    def adcopy_writer_agent(self):
        #"""
        #Generates ad copy based on insights and recommendations from previous agents.
        #"""
        return Agent(
            role='Lead Ad Copy Writer',
            goal=(
                "Write compelling Google text ads, including headlines and descriptions, tailored to SEM strategies. "
                "Ensure alignment with business goals, target audience, and keyword plans generated by previous agents."
            ),
            backstory=(
                "A creative and strategic ad copywriter with expertise in crafting high-performing Google Ads campaigns. "
                "Proficient in keyword-focused writing and A/B testing for optimization."
            ),
            tools=[
                SearchTools.search_internet,
                BrowserTools.scrape_and_summarize_website,
            ],
            verbose=True,
        )

###########################################################################################
# Print agent process to Streamlit app container                                          #
# This portion of the code is adapted from @AbubakrChan; thank you!                       #
# https://github.com/AbubakrChan/crewai-UI-business-product-launch/blob/main/main.py#L210 #
###########################################################################################
class StreamToExpander:
    def __init__(self, expander):
        self.expander = expander
        self.buffer = []
        self.colors = ['red', 'green', 'blue', 'orange']  # Define a list of colors
        self.color_index = 0  # Initialize color index

    def write(self, data):
        # Filter out ANSI escape codes using a regular expression
        cleaned_data = re.sub(r'\x1B\[[0-9;]*[mK]', '', data)

        # Check if the data contains 'task' information
        task_match_object = re.search(r'"task"\s*:\s*"(.*?)"', cleaned_data, re.IGNORECASE)
        task_match_input = re.search(r'task\s*:\s*([^\n]*)', cleaned_data, re.IGNORECASE)
        task_value = None
        if task_match_object:
            task_value = task_match_object.group(1)
        elif task_match_input:
            task_value = task_match_input.group(1).strip()

        if task_value:
            st.toast(":robot_face: " + task_value)

        # Check if the text contains the specified phrase and apply color
        if "Entering new CrewAgentExecutor chain" in cleaned_data:
            # Apply different color and switch color index
            self.color_index = (self.color_index + 1) % len(self.colors)
            cleaned_data = cleaned_data.replace("Entering new CrewAgentExecutor chain", f":{self.colors[self.color_index]}[Entering new CrewAgentExecutor chain]")

        if "Lead Business Analyst" in cleaned_data:
            cleaned_data = cleaned_data.replace("Lead Business Analyst", f":{self.colors[self.color_index]}[Lead Business Analyst]")
        if "Website Data Analyst" in cleaned_data:
            cleaned_data = cleaned_data.replace("Website Data Analyst", f":{self.colors[self.color_index]}[Website Data Analyst]")
        if "Keyword Planner" in cleaned_data:
            cleaned_data = cleaned_data.replace("Keyword Planner", f":{self.colors[self.color_index]}[Keyword Planner]")
        if "Lead Ad Copy Writer" in cleaned_data:
            cleaned_data = cleaned_data.replace("Lead Ad Copy Writer", f":{self.colors[self.color_index]}[Lead Ad Copy Writer]")
        if "Finished chain." in cleaned_data:
            cleaned_data = cleaned_data.replace("Finished chain.", f":{self.colors[self.color_index]}[Finished chain.]")

        self.buffer.append(cleaned_data)
        if "\n" in data:
            self.expander.markdown(''.join(self.buffer), unsafe_allow_html=True)
            self.buffer = []
